@use '@angular/material' as mat;
@use "sass:math";

// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();
@import "zf-theme.scss";

@include mat.all-legacy-component-themes($zf-app-theme);

.zf-viewer-1col {
  width: 100%;
}

.zf-viewer-2col {
  width: 45%;
}

.lo-row {
  display: flex;
  flex-direction: row;
}

.lo-column {
  display: flex;
  flex-direction: column;
}

.lo-full {
  flex: 1;
}

.lo-justify-start {
  justify-content: start;
}

.lo-justify-center {
  justify-content: center;
}

.lo-justify-end {
  justify-content: end;
}

.lo-justify-space-between {
  justify-content: space-between;
}

.lo-align-center {
  align-items: center;
}

.lo-gap20 {
  gap: 20px;
}

.lo-gap10 {
  gap: 10px;
}

.lo-gap5 {
  gap: 5px;
}

.lo-10px {
  flex-basis: 10px;
}

.lo-20px {
  flex-basis: 20px;
}

.lo-25px {
  flex-basis: 25px;
}

.lo-60px {
  flex-basis: 60px;
}

.lo-80px {
  flex-basis: 80px;
}

.lo-2 {
  flex-basis: 2%;
}

.lo-4 {
  flex-basis: 4%;
}

.lo-14 {
  flex-basis: 14%;
}

.lo-30 {
  flex-basis: 30%;
}

// push everything after this in flexLayout to the end of the layout
// So, use this in a toolbar to push the login button to the right.
.fill-remaining-space {
  flex: 1 1 auto;
}

// Until we work out how we want to do the sidenav and nav content background...
.mat-sidenav-container {
  background-color: white;
}

// used to limit presentation of a field to the available space
.truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.content {
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// To make tooltips show separate lines for /n
.ttnl {
  white-space: pre-line;
}

// For label printing
.zf-label {
  background-color: lightgray;
  margin-right: 5px;
  padding-left: 10px;
  padding-right: 10px;
  page-break-after: auto;
}

// mat-radio buttons come out squished for some reason.
// so deal with it like this...
.zf-radio-button {
  margin: 6px 10px 12px 0;
}

// Abusing the toolbar to allow a title with a nicely aligned adjacent icon
// Solves the problem that <h2>...</h2><button mat-icon-button>...</...> do not
// align horizontally.
.zf-mini-toolbar {
  background: inherit;
  padding: 0 !important;
}

.zf-tool {
  position: absolute;
  top: 56px;
  bottom: 0;
  right: 10px;
  left: 10px;
}

.zf-full-width {
  width: 100%;
  max-width: 1400px;
}

.zf-selection-list {
  height: 100%;
  overflow-y: scroll;
}

.zf-tool-content {
  padding: 25px;
}

.zf-fixed-sidenav {
  width: 400px;
}

.zf-togglable-sidenav {
  width: 95%;
}

.zf-selector {
  padding-top: 15px;
  padding-left: 15px;
}

.zf-selection-item {

  &:hover, &:active, &:focus {
    background-color: mat.get-color-from-palette(map-get($zf-app-theme, background), hover);
  }

  &.selected {
    background-color: mat.get-color-from-palette(map-get($zf-app-theme, primary), lighter, 0.5);
  }
}

.zf-mini-row {
  font-size: 10px;
  margin-left: 10px;
  width: 95%;
}

.zf-mini-title {
  font-size: 12px;
  font-weight: 500;
}

.zf-list-item {
  margin-bottom: 4px;
}

.zf-clickable {
  color: mat.get-color-from-palette(map-get($zf-app-theme, primary));
}

// I really should build a typography configuration for the app and then base this
// size relative to some existing typography style, but I is lazy.
.zf-title {
  font-size: 14pt;
  font-weight: 500;
  margin: 0 0 4px;
}

.zf-sub-title {
  font-weight: 500;
  margin: 5px 0;
  font-size: 12pt;
}

.zf-sub-sub-title {
  font-weight: 400;
  margin: 5px 0;
  font-size: 10pt;
}

.big-background {
  background-image: url('assets/images/horizontal.jpg');
  background-color: #FFFFFF;
  background-position: center center;
  background-attachment: fixed;
  background-repeat: no-repeat;
  background-size: contain;
  min-height: 1400px;
}


app-mutation-mini-viewer {
  width: 100%;
}

app-transgene-mini-viewer {
  width: 100%;
}

@media print {
  app-root > * {
    display: none;
  }
  app-root app-printable-tank-label {
    display: block;
  }
}

// Workaround for https://github.com/angular/material2/issues/4580.
@mixin mat-form-field-multiline-workaround($typography-config: null) {
  @if $typography-config == null {
    $typography-config: mat-typography-config();
  }

  .mat-form-field {
    // Copy-paste from @mat-form-field-typography();
    $line-height: mat-line-height($typography-config, input);
    $subscript-font-scale: 0.75;

    & & {
      &-underline {
        position: static;
      }

      &-subscript-wrapper {
        $subscript-margin-top: math.div(0.5em, $subscript-font-scale);
        $subscript-min-height: $line-height * 1em;
        $subscript-margin-bottom: -#{$subscript-margin-top + $line-height};

        position: static;
        min-height: $subscript-min-height;
        margin-bottom: $subscript-margin-bottom;
      }
    }

    &-appearance-legacy &-subscript-wrapper {
      // Copy-paste from @mat-form-field-legacy-typography();
      $line-spacing: math.div(($line-height - 1), 2);
      $subscript-margin-top: math.div(0.5em, $subscript-font-scale) - ($line-spacing * 2);

      $subscript-min-height: $line-height * 1em;
      $subscript-margin-bottom: -#{$subscript-margin-top + $line-height};

      min-height: $subscript-min-height;
      margin-bottom: $subscript-margin-bottom;
    }
  }
}

@include mat-form-field-multiline-workaround();
